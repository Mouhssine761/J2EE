{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    http;\n    apiUrl = '/api/auth';\n    tokenKey = 'jwt';\n    constructor(http) {\n      this.http = http;\n    }\n    login(email, password) {\n      return this.http.post(`${this.apiUrl}/login`, {\n        username: email,\n        password\n      }).pipe(tap(res => {\n        localStorage.setItem(this.tokenKey, res.token);\n      }));\n    }\n    register(email, password) {\n      return this.http.post(`${this.apiUrl}/register`, {\n        username: email,\n        password\n      });\n    }\n    logout() {\n      localStorage.removeItem(this.tokenKey);\n    }\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    isLoggedIn() {\n      return !!this.getToken();\n    }\n    static ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":{"version":3,"names":["tap","AuthService","http","apiUrl","tokenKey","constructor","login","email","password","post","username","pipe","res","localStorage","setItem","token","register","logout","removeItem","getToken","getItem","isLoggedIn","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\T14s\\Downloads\\Compressed\\demo2\\demo2\\Frontend\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\ninterface LoginResponse {\r\n  token: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private readonly apiUrl = '/api/auth';\r\n  private readonly tokenKey = 'jwt';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n\r\n  login(email: string, password: string): Observable<LoginResponse> {\r\n    return this.http\r\n      .post<LoginResponse>(`${this.apiUrl}/login`, { username: email, password })\r\n      .pipe(\r\n        tap(res => {\r\n          localStorage.setItem(this.tokenKey, res.token);\r\n        })\r\n      );\r\n  }\r\n\r\n\r\n  register(email: string, password: string): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/register`, {\r\n      username: email,\r\n      password\r\n    });\r\n  }\r\n\r\n\r\n  logout(): void {\r\n    localStorage.removeItem(this.tokenKey);\r\n  }\r\n\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;;;AAUpC,WAAaC,WAAW;EAAlB,MAAOA,WAAW;IAIFC,IAAA;IAHHC,MAAM,GAAG,WAAW;IACpBC,QAAQ,GAAG,KAAK;IAEjCC,YAAoBH,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAGvCI,KAAKA,CAACC,KAAa,EAAEC,QAAgB;MACnC,OAAO,IAAI,CAACN,IAAI,CACbO,IAAI,CAAgB,GAAG,IAAI,CAACN,MAAM,QAAQ,EAAE;QAAEO,QAAQ,EAAEH,KAAK;QAAEC;MAAQ,CAAE,CAAC,CAC1EG,IAAI,CACHX,GAAG,CAACY,GAAG,IAAG;QACRC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACV,QAAQ,EAAEQ,GAAG,CAACG,KAAK,CAAC;MAChD,CAAC,CAAC,CACH;IACL;IAGAC,QAAQA,CAACT,KAAa,EAAEC,QAAgB;MACtC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACN,MAAM,WAAW,EAAE;QAC/CO,QAAQ,EAAEH,KAAK;QACfC;OACD,CAAC;IACJ;IAGAS,MAAMA,CAAA;MACJJ,YAAY,CAACK,UAAU,CAAC,IAAI,CAACd,QAAQ,CAAC;IACxC;IAGAe,QAAQA,CAAA;MACN,OAAON,YAAY,CAACO,OAAO,CAAC,IAAI,CAAChB,QAAQ,CAAC;IAC5C;IAGAiB,UAAUA,CAAA;MACR,OAAO,CAAC,CAAC,IAAI,CAACF,QAAQ,EAAE;IAC1B;;uCAtCWlB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAXxB,WAAW;MAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;MAAAC,UAAA,EAFV;IAAM;;SAEP3B,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}