{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/T14s/Downloads/Compressed/demo2/demo2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, inject, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RealTimeDecisionsService } from \"com/example/demo/Service/DecisionService\";\nimport { HttpClientModule } from '@angular/common/http';\nlet RealTimeDecisionsComponent = class RealTimeDecisionsComponent {\n  decisionService = inject(RealTimeDecisionsService);\n  // Form data\n  speaker = signal('');\n  argument = signal('');\n  // Results\n  feedback = signal([]);\n  summary = signal(null);\n  // Loading states\n  isSubmitting = signal(false);\n  isLoadingSummary = signal(false);\n  // Error states\n  error = signal(null);\n  sendArgument() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Validate inputs\n      if (!_this.speaker() || !_this.argument()) {\n        _this.error.set('Both speaker and argument are required');\n        return;\n      }\n      _this.error.set(null);\n      _this.isSubmitting.set(true);\n      try {\n        const decision = yield _this.decisionService.sendArgument({\n          speaker: _this.speaker(),\n          text: _this.argument()\n        });\n        // Add new decision to feedback\n        _this.feedback.update(feedback => [...feedback, decision]);\n        // Clear form\n        _this.argument.set('');\n      } catch (err) {\n        _this.error.set('Failed to send argument. Please try again.');\n        console.error('Error sending argument:', err);\n      } finally {\n        _this.isSubmitting.set(false);\n      }\n    })();\n  }\n  loadSummary() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.isLoadingSummary.set(true);\n      _this2.error.set(null);\n      try {\n        const summary = yield _this2.decisionService.getSummary();\n        _this2.summary.set(summary);\n      } catch (err) {\n        _this2.error.set('Failed to load summary. Please try again.');\n        console.error('Error loading summary:', err);\n      } finally {\n        _this2.isLoadingSummary.set(false);\n      }\n    })();\n  }\n};\nRealTimeDecisionsComponent = __decorate([Component({\n  selector: 'app-real-time-decisions',\n  standalone: true,\n  imports: [CommonModule, FormsModule, HttpClientModule],\n  templateUrl: './real-time-decisions.component.html',\n  styleUrls: ['./real-time-decisions.component.scss']\n})], RealTimeDecisionsComponent);\nexport { RealTimeDecisionsComponent };","map":{"version":3,"names":["Component","inject","signal","CommonModule","FormsModule","RealTimeDecisionsService","HttpClientModule","RealTimeDecisionsComponent","decisionService","speaker","argument","feedback","summary","isSubmitting","isLoadingSummary","error","sendArgument","_this","_asyncToGenerator","set","decision","text","update","err","console","loadSummary","_this2","getSummary","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["C:\\Users\\T14s\\Downloads\\Compressed\\demo2\\demo2\\src\\app\\pages\\decisionmaking\\decisionmaking.component.ts"],"sourcesContent":["import { Component, inject, signal } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RealTimeDecisionsService } from \"com/example/demo/Service/DecisionService\";\r\nimport { Decision, Summary } from './models';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-real-time-decisions',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, HttpClientModule],\r\n  templateUrl: './real-time-decisions.component.html',\r\n  styleUrls: ['./real-time-decisions.component.scss']\r\n})\r\nexport class RealTimeDecisionsComponent {\r\n  private decisionService = inject(RealTimeDecisionsService);\r\n\r\n  // Form data\r\n  speaker = signal('');\r\n  argument = signal('');\r\n\r\n  // Results\r\n  feedback = signal<Decision[]>([]);\r\n  summary = signal<Summary | null>(null);\r\n\r\n  // Loading states\r\n  isSubmitting = signal(false);\r\n  isLoadingSummary = signal(false);\r\n\r\n  // Error states\r\n  error = signal<string | null>(null);\r\n\r\n  async sendArgument(): Promise<void> {\r\n    // Validate inputs\r\n    if (!this.speaker() || !this.argument()) {\r\n      this.error.set('Both speaker and argument are required');\r\n      return;\r\n    }\r\n\r\n    this.error.set(null);\r\n    this.isSubmitting.set(true);\r\n\r\n    try {\r\n      const decision = await this.decisionService.sendArgument({\r\n        speaker: this.speaker(),\r\n        text: this.argument()\r\n      });\r\n\r\n      // Add new decision to feedback\r\n      this.feedback.update(feedback => [...feedback, decision]);\r\n\r\n      // Clear form\r\n      this.argument.set('');\r\n    } catch (err) {\r\n      this.error.set('Failed to send argument. Please try again.');\r\n      console.error('Error sending argument:', err);\r\n    } finally {\r\n      this.isSubmitting.set(false);\r\n    }\r\n  }\r\n\r\n  async loadSummary(): Promise<void> {\r\n    this.isLoadingSummary.set(true);\r\n    this.error.set(null);\r\n\r\n    try {\r\n      const summary = await this.decisionService.getSummary();\r\n      this.summary.set(summary);\r\n    } catch (err) {\r\n      this.error.set('Failed to load summary. Please try again.');\r\n      console.error('Error loading summary:', err);\r\n    } finally {\r\n      this.isLoadingSummary.set(false);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}