{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, NgZone, ElementRef, ChangeDetectorRef, ANIMATION_MODULE_TYPE, afterRender, ViewChild, Injector, TemplateRef, Injectable, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { MatButton, MatButtonModule } from './button.mjs';\nimport { DOCUMENT } from '@angular/common';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { _IdGenerator, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { M as MatCommonModule } from './common-module-WayjW0Pb.mjs';\nimport './icon-button-D1J0zeqv.mjs';\nimport '@angular/cdk/private';\nimport './ripple-loader-Ce3DAhPW.mjs';\nimport './ripple-BT3tzh6F.mjs';\nimport '@angular/cdk/coercion';\nimport './structural-styles-BQUT6wsL.mjs';\nimport './index-SYVYjXwK.mjs';\nimport '@angular/cdk/bidi';\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nfunction SimpleSnackBar_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function SimpleSnackBar_Conditional_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.action());\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.data.action, \" \");\n  }\n}\nconst _c0 = [\"label\"];\nfunction MatSnackBarContainer_ng_template_4_Template(rf, ctx) {}\nconst MAX_TIMEOUT = /*#__PURE__*/Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n  _overlayRef;\n  /** The instance of the component making up the content of the snack bar. */\n  instance;\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance;\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  _afterDismissed = /*#__PURE__*/new Subject();\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  _afterOpened = /*#__PURE__*/new Subject();\n  /** Subject for notifying the user that the snack bar action was called. */\n  _onAction = /*#__PURE__*/new Subject();\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  _durationTimeoutId;\n  /** Whether the snack bar was dismissed using the action button. */\n  _dismissedByAction = false;\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    this.containerInstance = containerInstance;\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n  /** Dismisses the snack bar. */\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n  /** Marks the snackbar action clicked. */\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n      this.dismiss();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration) {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n  /** Marks the snackbar as opened */\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n  /** Cleans up the DOM after closing. */\n  _finishDismiss() {\n    this._overlayRef.dispose();\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed() {\n    return this._afterDismissed;\n  }\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction() {\n    return this._onAction;\n  }\n}\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = /*#__PURE__*/new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness = 'assertive';\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage = '';\n  /**\n   * The view container that serves as the parent for the snackbar for the purposes of dependency\n   * injection. Note: this does not affect where the snackbar is inserted in the DOM.\n   */\n  viewContainerRef;\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration = 0;\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass;\n  /** Text layout direction for the snack bar. */\n  direction;\n  /** Data being injected into the child component. */\n  data = null;\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition = 'center';\n  /** The vertical position to place the snack bar. */\n  verticalPosition = 'bottom';\n}\n\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\nlet MatSnackBarLabel = /*#__PURE__*/(() => {\n  class MatSnackBarLabel {\n    static ɵfac = function MatSnackBarLabel_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSnackBarLabel)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatSnackBarLabel,\n      selectors: [[\"\", \"matSnackBarLabel\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-snack-bar-label\", \"mdc-snackbar__label\"]\n    });\n  }\n  return MatSnackBarLabel;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\nlet MatSnackBarActions = /*#__PURE__*/(() => {\n  class MatSnackBarActions {\n    static ɵfac = function MatSnackBarActions_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSnackBarActions)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatSnackBarActions,\n      selectors: [[\"\", \"matSnackBarActions\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-snack-bar-actions\", \"mdc-snackbar__actions\"]\n    });\n  }\n  return MatSnackBarActions;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Directive that should be applied to each of the snack bar's action buttons. */\nlet MatSnackBarAction = /*#__PURE__*/(() => {\n  class MatSnackBarAction {\n    static ɵfac = function MatSnackBarAction_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSnackBarAction)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatSnackBarAction,\n      selectors: [[\"\", \"matSnackBarAction\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-snack-bar-action\", \"mdc-snackbar__action\"]\n    });\n  }\n  return MatSnackBarAction;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SimpleSnackBar = /*#__PURE__*/(() => {\n  class SimpleSnackBar {\n    snackBarRef = inject(MatSnackBarRef);\n    data = inject(MAT_SNACK_BAR_DATA);\n    constructor() {}\n    /** Performs the action on the snack bar. */\n    action() {\n      this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n      return !!this.data.action;\n    }\n    static ɵfac = function SimpleSnackBar_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SimpleSnackBar)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: SimpleSnackBar,\n      selectors: [[\"simple-snack-bar\"]],\n      hostAttrs: [1, \"mat-mdc-simple-snack-bar\"],\n      exportAs: [\"matSnackBar\"],\n      decls: 3,\n      vars: 2,\n      consts: [[\"matSnackBarLabel\", \"\"], [\"matSnackBarActions\", \"\"], [\"mat-button\", \"\", \"matSnackBarAction\", \"\", 3, \"click\"]],\n      template: function SimpleSnackBar_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵtext(1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(2, SimpleSnackBar_Conditional_2_Template, 3, 1, \"div\", 1);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.data.message, \"\\n\");\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(ctx.hasAction ? 2 : -1);\n        }\n      },\n      dependencies: [MatButton, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction],\n      styles: [\".mat-mdc-simple-snack-bar{display:flex}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return SimpleSnackBar;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst ENTER_ANIMATION = '_mat-snack-bar-enter';\nconst EXIT_ANIMATION = '_mat-snack-bar-exit';\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nlet MatSnackBarContainer = /*#__PURE__*/(() => {\n  class MatSnackBarContainer extends BasePortalOutlet {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _platform = inject(Platform);\n    _rendersRef;\n    _animationsDisabled = inject(ANIMATION_MODULE_TYPE, {\n      optional: true\n    }) === 'NoopAnimations';\n    snackBarConfig = inject(MatSnackBarConfig);\n    _document = inject(DOCUMENT);\n    _trackedModals = new Set();\n    _enterFallback;\n    _exitFallback;\n    _renders = new Subject();\n    /** The number of milliseconds to wait before announcing the snack bar's content. */\n    _announceDelay = 150;\n    /** The timeout for announcing the snack bar's content. */\n    _announceTimeoutId;\n    /** Whether the component has been destroyed. */\n    _destroyed = false;\n    /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n    _portalOutlet;\n    /** Subject for notifying that the snack bar has announced to screen readers. */\n    _onAnnounce = new Subject();\n    /** Subject for notifying that the snack bar has exited from view. */\n    _onExit = new Subject();\n    /** Subject for notifying that the snack bar has finished entering the view. */\n    _onEnter = new Subject();\n    /** The state of the snack bar animations. */\n    _animationState = 'void';\n    /** aria-live value for the live region. */\n    _live;\n    /**\n     * Element that will have the `mdc-snackbar__label` class applied if the attached component\n     * or template does not have it. This ensures that the appropriate structure, typography, and\n     * color is applied to the attached view.\n     */\n    _label;\n    /**\n     * Role of the live region. This is only for Firefox as there is a known issue where Firefox +\n     * JAWS does not read out aria-live message.\n     */\n    _role;\n    /** Unique ID of the aria-live element. */\n    _liveElementId = inject(_IdGenerator).getId('mat-snack-bar-container-live-');\n    constructor() {\n      super();\n      const config = this.snackBarConfig;\n      // Use aria-live rather than a live role like 'alert' or 'status'\n      // because NVDA and JAWS have show inconsistent behavior with live roles.\n      if (config.politeness === 'assertive' && !config.announcementMessage) {\n        this._live = 'assertive';\n      } else if (config.politeness === 'off') {\n        this._live = 'off';\n      } else {\n        this._live = 'polite';\n      }\n      // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n      // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n      if (this._platform.FIREFOX) {\n        if (this._live === 'polite') {\n          this._role = 'status';\n        }\n        if (this._live === 'assertive') {\n          this._role = 'alert';\n        }\n      }\n      // Note: ideally we'd just do an `afterNextRender` in the places where we need to delay\n      // something, however in some cases (TestBed teardown) the injector can be destroyed at an\n      // unexpected time, causing the `afterRender` to fail.\n      this._rendersRef = afterRender(() => this._renders.next(), {\n        manualCleanup: true\n      });\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n      this._assertNotAttached();\n      const result = this._portalOutlet.attachComponentPortal(portal);\n      this._afterPortalAttached();\n      return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n      this._assertNotAttached();\n      const result = this._portalOutlet.attachTemplatePortal(portal);\n      this._afterPortalAttached();\n      return result;\n    }\n    /**\n     * Attaches a DOM portal to the snack bar container.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n    attachDomPortal = portal => {\n      this._assertNotAttached();\n      const result = this._portalOutlet.attachDomPortal(portal);\n      this._afterPortalAttached();\n      return result;\n    };\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(animationName) {\n      if (animationName === EXIT_ANIMATION) {\n        this._completeExit();\n      } else if (animationName === ENTER_ANIMATION) {\n        clearTimeout(this._enterFallback);\n        this._ngZone.run(() => {\n          this._onEnter.next();\n          this._onEnter.complete();\n        });\n      }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n      if (!this._destroyed) {\n        this._animationState = 'visible';\n        // _animationState lives in host bindings and `detectChanges` does not refresh host bindings\n        // so we have to call `markForCheck` to ensure the host view is refreshed eventually.\n        this._changeDetectorRef.markForCheck();\n        this._changeDetectorRef.detectChanges();\n        this._screenReaderAnnounce();\n        if (this._animationsDisabled) {\n          this._renders.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => queueMicrotask(() => this.onAnimationEnd(ENTER_ANIMATION)));\n          });\n        } else {\n          clearTimeout(this._enterFallback);\n          this._enterFallback = setTimeout(() => {\n            // The snack bar will stay invisible if it fails to animate. Add a fallback class so it\n            // becomes visible. This can happen in some apps that do `* {animation: none !important}`.\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-fallback-visible');\n            this.onAnimationEnd(ENTER_ANIMATION);\n          }, 200);\n        }\n      }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n      if (this._destroyed) {\n        return of(undefined);\n      }\n      // It's common for snack bars to be opened by random outside calls like HTTP requests or\n      // errors. Run inside the NgZone to ensure that it functions correctly.\n      this._ngZone.run(() => {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        this._changeDetectorRef.markForCheck();\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        if (this._animationsDisabled) {\n          this._renders.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => queueMicrotask(() => this.onAnimationEnd(EXIT_ANIMATION)));\n          });\n        } else {\n          clearTimeout(this._exitFallback);\n          this._exitFallback = setTimeout(() => this.onAnimationEnd(EXIT_ANIMATION), 200);\n        }\n      });\n      return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n      this._destroyed = true;\n      this._clearFromModals();\n      this._completeExit();\n      this._renders.complete();\n      this._rendersRef.destroy();\n    }\n    _completeExit() {\n      clearTimeout(this._exitFallback);\n      queueMicrotask(() => {\n        this._onExit.next();\n        this._onExit.complete();\n      });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n      const element = this._elementRef.nativeElement;\n      const panelClasses = this.snackBarConfig.panelClass;\n      if (panelClasses) {\n        if (Array.isArray(panelClasses)) {\n          // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n          panelClasses.forEach(cssClass => element.classList.add(cssClass));\n        } else {\n          element.classList.add(panelClasses);\n        }\n      }\n      this._exposeToModals();\n      // Check to see if the attached component or template uses the MDC template structure,\n      // specifically the MDC label. If not, the container should apply the MDC label class to this\n      // component's label container, which will apply MDC's label styles to the attached view.\n      const label = this._label.nativeElement;\n      const labelClass = 'mdc-snackbar__label';\n      label.classList.toggle(labelClass, !label.querySelector(`.${labelClass}`));\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live element if there is an\n     * `aria-modal` and the live element is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live element.\n     */\n    _exposeToModals() {\n      // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with the\n      // `LiveAnnouncer` and any other usages.\n      //\n      // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n      // section of the DOM we need to look through. This should cover all the cases we support, but\n      // the selector can be expanded if it turns out to be too narrow.\n      const id = this._liveElementId;\n      const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n      for (let i = 0; i < modals.length; i++) {\n        const modal = modals[i];\n        const ariaOwns = modal.getAttribute('aria-owns');\n        this._trackedModals.add(modal);\n        if (!ariaOwns) {\n          modal.setAttribute('aria-owns', id);\n        } else if (ariaOwns.indexOf(id) === -1) {\n          modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n        }\n      }\n    }\n    /** Clears the references to the live element from any modals it was added to. */\n    _clearFromModals() {\n      this._trackedModals.forEach(modal => {\n        const ariaOwns = modal.getAttribute('aria-owns');\n        if (ariaOwns) {\n          const newValue = ariaOwns.replace(this._liveElementId, '').trim();\n          if (newValue.length > 0) {\n            modal.setAttribute('aria-owns', newValue);\n          } else {\n            modal.removeAttribute('aria-owns');\n          }\n        }\n      });\n      this._trackedModals.clear();\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Attempting to attach snack bar content after content is already attached');\n      }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n      if (this._announceTimeoutId) {\n        return;\n      }\n      this._ngZone.runOutsideAngular(() => {\n        this._announceTimeoutId = setTimeout(() => {\n          if (this._destroyed) {\n            return;\n          }\n          const element = this._elementRef.nativeElement;\n          const inertElement = element.querySelector('[aria-hidden]');\n          const liveElement = element.querySelector('[aria-live]');\n          if (inertElement && liveElement) {\n            // If an element in the snack bar content is focused before being moved\n            // track it and restore focus after moving to the live region.\n            let focusedElement = null;\n            if (this._platform.isBrowser && document.activeElement instanceof HTMLElement && inertElement.contains(document.activeElement)) {\n              focusedElement = document.activeElement;\n            }\n            inertElement.removeAttribute('aria-hidden');\n            liveElement.appendChild(inertElement);\n            focusedElement?.focus();\n            this._onAnnounce.next();\n            this._onAnnounce.complete();\n          }\n        }, this._announceDelay);\n      });\n    }\n    static ɵfac = function MatSnackBarContainer_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSnackBarContainer)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatSnackBarContainer,\n      selectors: [[\"mat-snack-bar-container\"]],\n      viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._label = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mdc-snackbar\", \"mat-mdc-snack-bar-container\"],\n      hostVars: 6,\n      hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"animationend\", function MatSnackBarContainer_animationend_HostBindingHandler($event) {\n            return ctx.onAnimationEnd($event.animationName);\n          })(\"animationcancel\", function MatSnackBarContainer_animationcancel_HostBindingHandler($event) {\n            return ctx.onAnimationEnd($event.animationName);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"mat-snack-bar-container-enter\", ctx._animationState === \"visible\")(\"mat-snack-bar-container-exit\", ctx._animationState === \"hidden\")(\"mat-snack-bar-container-animations-enabled\", !ctx._animationsDisabled);\n        }\n      },\n      features: [i0.ɵɵInheritDefinitionFeature],\n      decls: 6,\n      vars: 3,\n      consts: [[\"label\", \"\"], [1, \"mdc-snackbar__surface\", \"mat-mdc-snackbar-surface\"], [1, \"mat-mdc-snack-bar-label\"], [\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]],\n      template: function MatSnackBarContainer_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2, 0)(3, \"div\", 3);\n          i0.ɵɵtemplate(4, MatSnackBarContainer_ng_template_4_Template, 0, 0, \"ng-template\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(5, \"div\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role)(\"id\", ctx._liveElementId);\n        }\n      },\n      dependencies: [CdkPortalOutlet],\n      styles: [\"@keyframes _mat-snack-bar-enter{from{transform:scale(0.8);opacity:0}to{transform:scale(1);opacity:1}}@keyframes _mat-snack-bar-exit{from{opacity:1}to{opacity:0}}.mat-mdc-snack-bar-container{display:flex;align-items:center;justify-content:center;box-sizing:border-box;-webkit-tap-highlight-color:rgba(0,0,0,0);margin:8px}.mat-mdc-snack-bar-handset .mat-mdc-snack-bar-container{width:100vw}.mat-snack-bar-container-animations-enabled{opacity:0}.mat-snack-bar-container-animations-enabled.mat-snack-bar-fallback-visible{opacity:1}.mat-snack-bar-container-animations-enabled.mat-snack-bar-container-enter{animation:_mat-snack-bar-enter 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-snack-bar-container-animations-enabled.mat-snack-bar-container-exit{animation:_mat-snack-bar-exit 75ms cubic-bezier(0.4, 0, 1, 1) forwards}.mat-mdc-snackbar-surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;padding-left:0;padding-right:8px}[dir=rtl] .mat-mdc-snackbar-surface{padding-right:0;padding-left:8px}.mat-mdc-snack-bar-container .mat-mdc-snackbar-surface{min-width:344px;max-width:672px}.mat-mdc-snack-bar-handset .mat-mdc-snackbar-surface{width:100%;min-width:0}@media(forced-colors: active){.mat-mdc-snackbar-surface{outline:solid 1px}}.mat-mdc-snack-bar-container .mat-mdc-snackbar-surface{color:var(--mdc-snackbar-supporting-text-color, var(--mat-sys-inverse-on-surface));border-radius:var(--mdc-snackbar-container-shape, var(--mat-sys-corner-extra-small));background-color:var(--mdc-snackbar-container-color, var(--mat-sys-inverse-surface))}.mdc-snackbar__label{width:100%;flex-grow:1;box-sizing:border-box;margin:0;padding:14px 8px 14px 16px}[dir=rtl] .mdc-snackbar__label{padding-left:8px;padding-right:16px}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-family:var(--mdc-snackbar-supporting-text-font, var(--mat-sys-body-medium-font));font-size:var(--mdc-snackbar-supporting-text-size, var(--mat-sys-body-medium-size));font-weight:var(--mdc-snackbar-supporting-text-weight, var(--mat-sys-body-medium-weight));line-height:var(--mdc-snackbar-supporting-text-line-height, var(--mat-sys-body-medium-line-height))}.mat-mdc-snack-bar-actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled).mat-unthemed{color:var(--mat-snack-bar-button-color, var(--mat-sys-inverse-primary))}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){--mat-text-button-state-layer-color:currentColor;--mat-text-button-ripple-color:currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{opacity:.1}\\n\"],\n      encapsulation: 2\n    });\n  }\n  return MatSnackBarContainer;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nlet MatSnackBar = /*#__PURE__*/(() => {\n  class MatSnackBar {\n    _overlay = inject(Overlay);\n    _live = inject(LiveAnnouncer);\n    _injector = inject(Injector);\n    _breakpointObserver = inject(BreakpointObserver);\n    _parentSnackBar = inject(MatSnackBar, {\n      optional: true,\n      skipSelf: true\n    });\n    _defaultConfig = inject(MAT_SNACK_BAR_DEFAULT_OPTIONS);\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n    _snackBarRefAtThisLevel = null;\n    /** The component that should be rendered as the snack bar's simple component. */\n    simpleSnackBarComponent = SimpleSnackBar;\n    /** The container component that attaches the provided template or component. */\n    snackBarContainerComponent = MatSnackBarContainer;\n    /** The CSS class to apply for handset mode. */\n    handsetCssClass = 'mat-mdc-snack-bar-handset';\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n      const parent = this._parentSnackBar;\n      return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n      if (this._parentSnackBar) {\n        this._parentSnackBar._openedSnackBarRef = value;\n      } else {\n        this._snackBarRefAtThisLevel = value;\n      }\n    }\n    constructor() {}\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n      return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n      return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n      const _config = {\n        ...this._defaultConfig,\n        ...config\n      };\n      // Since the user doesn't have access to the component, we can\n      // override the data to pass in our own message and action.\n      _config.data = {\n        message,\n        action\n      };\n      // Since the snack bar has `role=\"alert\"`, we don't\n      // want to announce the same message twice.\n      if (_config.announcementMessage === message) {\n        _config.announcementMessage = undefined;\n      }\n      return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n      if (this._openedSnackBarRef) {\n        this._openedSnackBarRef.dismiss();\n      }\n    }\n    ngOnDestroy() {\n      // Only dismiss the snack bar at the current level on destroy.\n      if (this._snackBarRefAtThisLevel) {\n        this._snackBarRefAtThisLevel.dismiss();\n      }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      const injector = Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatSnackBarConfig,\n          useValue: config\n        }]\n      });\n      const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n      const containerRef = overlayRef.attach(containerPortal);\n      containerRef.instance.snackBarConfig = config;\n      return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n      const config = {\n        ...new MatSnackBarConfig(),\n        ...this._defaultConfig,\n        ...userConfig\n      };\n      const overlayRef = this._createOverlay(config);\n      const container = this._attachSnackBarContainer(overlayRef, config);\n      const snackBarRef = new MatSnackBarRef(container, overlayRef);\n      if (content instanceof TemplateRef) {\n        const portal = new TemplatePortal(content, null, {\n          $implicit: config.data,\n          snackBarRef\n        });\n        snackBarRef.instance = container.attachTemplatePortal(portal);\n      } else {\n        const injector = this._createInjector(config, snackBarRef);\n        const portal = new ComponentPortal(content, undefined, injector);\n        const contentRef = container.attachComponentPortal(portal);\n        // We can't pass this via the injector, because the injector is created earlier.\n        snackBarRef.instance = contentRef.instance;\n      }\n      // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n      // appropriate. This class is applied to the overlay element because the overlay must expand to\n      // fill the width of the screen for full width snackbars.\n      this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n        overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n      });\n      if (config.announcementMessage) {\n        // Wait until the snack bar contents have been announced then deliver this message.\n        container._onAnnounce.subscribe(() => {\n          this._live.announce(config.announcementMessage, config.politeness);\n        });\n      }\n      this._animateSnackBar(snackBarRef, config);\n      this._openedSnackBarRef = snackBarRef;\n      return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n      // When the snackbar is dismissed, clear the reference to it.\n      snackBarRef.afterDismissed().subscribe(() => {\n        // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n        if (this._openedSnackBarRef == snackBarRef) {\n          this._openedSnackBarRef = null;\n        }\n        if (config.announcementMessage) {\n          this._live.clear();\n        }\n      });\n      // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n      if (config.duration && config.duration > 0) {\n        snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n      }\n      if (this._openedSnackBarRef) {\n        // If a snack bar is already in view, dismiss it and enter the\n        // new snack bar after exit animation is complete.\n        this._openedSnackBarRef.afterDismissed().subscribe(() => {\n          snackBarRef.containerInstance.enter();\n        });\n        this._openedSnackBarRef.dismiss();\n      } else {\n        // If no snack bar is in view, enter the new snack bar.\n        snackBarRef.containerInstance.enter();\n      }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n      const overlayConfig = new OverlayConfig();\n      overlayConfig.direction = config.direction;\n      let positionStrategy = this._overlay.position().global();\n      // Set horizontal position.\n      const isRtl = config.direction === 'rtl';\n      const isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n      const isRight = !isLeft && config.horizontalPosition !== 'center';\n      if (isLeft) {\n        positionStrategy.left('0');\n      } else if (isRight) {\n        positionStrategy.right('0');\n      } else {\n        positionStrategy.centerHorizontally();\n      }\n      // Set horizontal position.\n      if (config.verticalPosition === 'top') {\n        positionStrategy.top('0');\n      } else {\n        positionStrategy.bottom('0');\n      }\n      overlayConfig.positionStrategy = positionStrategy;\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      return Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatSnackBarRef,\n          useValue: snackBarRef\n        }, {\n          provide: MAT_SNACK_BAR_DATA,\n          useValue: config.data\n        }]\n      });\n    }\n    static ɵfac = function MatSnackBar_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSnackBar)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MatSnackBar,\n      factory: MatSnackBar.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return MatSnackBar;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst DIRECTIVES = [MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction];\nlet MatSnackBarModule = /*#__PURE__*/(() => {\n  class MatSnackBarModule {\n    static ɵfac = function MatSnackBarModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSnackBarModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatSnackBarModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [MatSnackBar],\n      imports: [OverlayModule, PortalModule, MatButtonModule, MatCommonModule, SimpleSnackBar, MatCommonModule]\n    });\n  }\n  return MatSnackBarModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst matSnackBarAnimations = {\n  // Represents\n  // trigger('state', [\n  //   state(\n  //     'void, hidden',\n  //     style({\n  //       transform: 'scale(0.8)',\n  //       opacity: 0,\n  //     }),\n  //   ),\n  //   state(\n  //     'visible',\n  //     style({\n  //       transform: 'scale(1)',\n  //       opacity: 1,\n  //     }),\n  //   ),\n  //   transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n  //   transition(\n  //     '* => void, * => hidden',\n  //     animate(\n  //       '75ms cubic-bezier(0.4, 0.0, 1, 1)',\n  //       style({\n  //         opacity: 0,\n  //       }),\n  //     ),\n  //   ),\n  // ])\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: {\n    type: 7,\n    name: 'state',\n    'definitions': [{\n      type: 0,\n      name: 'void, hidden',\n      styles: {\n        type: 6,\n        styles: {\n          transform: 'scale(0.8)',\n          opacity: 0\n        },\n        offset: null\n      }\n    }, {\n      type: 0,\n      name: 'visible',\n      styles: {\n        type: 6,\n        styles: {\n          transform: 'scale(1)',\n          opacity: 1\n        },\n        offset: null\n      }\n    }, {\n      type: 1,\n      expr: '* => visible',\n      animation: {\n        type: 4,\n        styles: null,\n        timings: '150ms cubic-bezier(0, 0, 0.2, 1)'\n      },\n      options: null\n    }, {\n      type: 1,\n      expr: '* => void, * => hidden',\n      animation: {\n        type: 4,\n        styles: {\n          type: 6,\n          styles: {\n            opacity: 0\n          },\n          offset: null\n        },\n        timings: '75ms cubic-bezier(0.4, 0.0, 1, 1)'\n      },\n      options: null\n    }],\n    options: {}\n  }\n};\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarAction, MatSnackBarActions, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };","map":{"version":3,"names":["i0","InjectionToken","Directive","inject","Component","ViewEncapsulation","ChangeDetectionStrategy","NgZone","ElementRef","ChangeDetectorRef","ANIMATION_MODULE_TYPE","afterRender","ViewChild","Injector","TemplateRef","Injectable","NgModule","Subject","of","MatButton","MatButtonModule","DOCUMENT","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","TemplatePortal","PortalModule","_IdGenerator","LiveAnnouncer","Platform","take","takeUntil","BreakpointObserver","Breakpoints","Overlay","OverlayConfig","OverlayModule","M","MatCommonModule","SimpleSnackBar_Conditional_2_Template","rf","ctx","_r1","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","SimpleSnackBar_Conditional_2_Template_button_click_1_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","action","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","data","_c0","MatSnackBarContainer_ng_template_4_Template","MAX_TIMEOUT","Math","pow","MatSnackBarRef","_overlayRef","instance","containerInstance","_afterDismissed","_afterOpened","_onAction","_durationTimeoutId","_dismissedByAction","constructor","_onExit","subscribe","_finishDismiss","dismiss","closed","exit","clearTimeout","dismissWithAction","next","complete","closeWithAction","_dismissAfter","duration","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","viewContainerRef","panelClass","direction","horizontalPosition","verticalPosition","MatSnackBarLabel","ɵfac","MatSnackBarLabel_Factory","__ngFactoryType__","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","ngDevMode","MatSnackBarActions","MatSnackBarActions_Factory","MatSnackBarAction","MatSnackBarAction_Factory","SimpleSnackBar","snackBarRef","hasAction","SimpleSnackBar_Factory","ɵcmp","ɵɵdefineComponent","exportAs","decls","vars","consts","template","SimpleSnackBar_Template","ɵɵtemplate","message","ɵɵconditional","dependencies","styles","encapsulation","changeDetection","ENTER_ANIMATION","EXIT_ANIMATION","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","_platform","_rendersRef","_animationsDisabled","optional","snackBarConfig","_document","_trackedModals","Set","_enterFallback","_exitFallback","_renders","_announceDelay","_announceTimeoutId","_destroyed","_portalOutlet","_onAnnounce","_animationState","_live","_label","_role","_liveElementId","getId","config","FIREFOX","manualCleanup","attachComponentPortal","portal","_assertNotAttached","result","_afterPortalAttached","attachTemplatePortal","attachDomPortal","onAnimationEnd","animationName","_completeExit","run","enter","markForCheck","detectChanges","_screenReaderAnnounce","pipe","queueMicrotask","nativeElement","classList","add","undefined","setAttribute","ngOnDestroy","_clearFromModals","destroy","element","panelClasses","Array","isArray","forEach","cssClass","_exposeToModals","label","labelClass","toggle","querySelector","id","modals","querySelectorAll","i","length","modal","ariaOwns","getAttribute","indexOf","newValue","replace","trim","removeAttribute","clear","hasAttached","Error","runOutsideAngular","inertElement","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","appendChild","focus","MatSnackBarContainer_Factory","viewQuery","MatSnackBarContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","MatSnackBarContainer_HostBindings","MatSnackBarContainer_animationend_HostBindingHandler","$event","MatSnackBarContainer_animationcancel_HostBindingHandler","ɵɵclassProp","features","ɵɵInheritDefinitionFeature","MatSnackBarContainer_Template","ɵɵelement","ɵɵattribute","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MatSnackBar","_overlay","_injector","_breakpointObserver","_parentSnackBar","skipSelf","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","_openedSnackBarRef","parent","value","openFromComponent","component","_attach","openFromTemplate","open","_config","_attachSnackBarContainer","overlayRef","userInjector","injector","create","providers","provide","useValue","containerPortal","containerRef","attach","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","state","overlayElement","matches","announce","_animateSnackBar","overlayConfig","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","MatSnackBar_Factory","ɵprov","ɵɵdefineInjectable","token","DIRECTIVES","MatSnackBarModule","MatSnackBarModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","matSnackBarAnimations","snackBarState","name","transform","opacity","offset","expr","animation","timings","options"],"sources":["C:/Users/T14s/Downloads/Compressed/demo2/KHCHICHINE-GROD-ELAMRI-RAHILI/Frontend/node_modules/@angular/material/fesm2022/snack-bar.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, NgZone, ElementRef, ChangeDetectorRef, ANIMATION_MODULE_TYPE, afterRender, ViewChild, Injector, TemplateRef, Injectable, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { MatButton, MatButtonModule } from './button.mjs';\nimport { DOCUMENT } from '@angular/common';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { _IdGenerator, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { M as MatCommonModule } from './common-module-WayjW0Pb.mjs';\nimport './icon-button-D1J0zeqv.mjs';\nimport '@angular/cdk/private';\nimport './ripple-loader-Ce3DAhPW.mjs';\nimport './ripple-BT3tzh6F.mjs';\nimport '@angular/cdk/coercion';\nimport './structural-styles-BQUT6wsL.mjs';\nimport './index-SYVYjXwK.mjs';\nimport '@angular/cdk/bidi';\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    _overlayRef;\n    /** The instance of the component making up the content of the snack bar. */\n    instance;\n    /**\n     * The instance of the component making up the content of the snack bar.\n     * @docs-private\n     */\n    containerInstance;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n    _afterDismissed = new Subject();\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n    _afterOpened = new Subject();\n    /** Subject for notifying the user that the snack bar action was called. */\n    _onAction = new Subject();\n    /**\n     * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n     * dismissed before the duration passes.\n     */\n    _durationTimeoutId;\n    /** Whether the snack bar was dismissed using the action button. */\n    _dismissedByAction = false;\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n    politeness = 'assertive';\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n    announcementMessage = '';\n    /**\n     * The view container that serves as the parent for the snackbar for the purposes of dependency\n     * injection. Note: this does not affect where the snackbar is inserted in the DOM.\n     */\n    viewContainerRef;\n    /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n    duration = 0;\n    /** Extra CSS classes to be added to the snack bar container. */\n    panelClass;\n    /** Text layout direction for the snack bar. */\n    direction;\n    /** Data being injected into the child component. */\n    data = null;\n    /** The horizontal position to place the snack bar. */\n    horizontalPosition = 'center';\n    /** The vertical position to place the snack bar. */\n    verticalPosition = 'bottom';\n}\n\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\nclass MatSnackBarLabel {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBarLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: MatSnackBarLabel, isStandalone: true, selector: \"[matSnackBarLabel]\", host: { classAttribute: \"mat-mdc-snack-bar-label mdc-snackbar__label\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBarLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarLabel]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-label mdc-snackbar__label',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\nclass MatSnackBarActions {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBarActions, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: MatSnackBarActions, isStandalone: true, selector: \"[matSnackBarActions]\", host: { classAttribute: \"mat-mdc-snack-bar-actions mdc-snackbar__actions\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBarActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarActions]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-actions mdc-snackbar__actions',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to each of the snack bar's action buttons. */\nclass MatSnackBarAction {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBarAction, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: MatSnackBarAction, isStandalone: true, selector: \"[matSnackBarAction]\", host: { classAttribute: \"mat-mdc-snack-bar-action mdc-snackbar__action\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBarAction, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarAction]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-action mdc-snackbar__action',\n                    },\n                }]\n        }] });\n\nclass SimpleSnackBar {\n    snackBarRef = inject(MatSnackBarRef);\n    data = inject(MAT_SNACK_BAR_DATA);\n    constructor() { }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: SimpleSnackBar, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.2.6\", type: SimpleSnackBar, isStandalone: true, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-mdc-simple-snack-bar\" }, exportAs: [\"matSnackBar\"], ngImport: i0, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n@if (hasAction) {\\n  <div matSnackBarActions>\\n    <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n      {{data.action}}\\n    </button>\\n  </div>\\n}\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\\n\"], dependencies: [{ kind: \"component\", type: MatButton, selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \", exportAs: [\"matButton\"] }, { kind: \"directive\", type: MatSnackBarLabel, selector: \"[matSnackBarLabel]\" }, { kind: \"directive\", type: MatSnackBarActions, selector: \"[matSnackBarActions]\" }, { kind: \"directive\", type: MatSnackBarAction, selector: \"[matSnackBarAction]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', exportAs: 'matSnackBar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [MatButton, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction], host: {\n                        'class': 'mat-mdc-simple-snack-bar',\n                    }, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n@if (hasAction) {\\n  <div matSnackBarActions>\\n    <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n      {{data.action}}\\n    </button>\\n  </div>\\n}\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\\n\"] }]\n        }], ctorParameters: () => [] });\n\nconst ENTER_ANIMATION = '_mat-snack-bar-enter';\nconst EXIT_ANIMATION = '_mat-snack-bar-exit';\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _platform = inject(Platform);\n    _rendersRef;\n    _animationsDisabled = inject(ANIMATION_MODULE_TYPE, { optional: true }) === 'NoopAnimations';\n    snackBarConfig = inject(MatSnackBarConfig);\n    _document = inject(DOCUMENT);\n    _trackedModals = new Set();\n    _enterFallback;\n    _exitFallback;\n    _renders = new Subject();\n    /** The number of milliseconds to wait before announcing the snack bar's content. */\n    _announceDelay = 150;\n    /** The timeout for announcing the snack bar's content. */\n    _announceTimeoutId;\n    /** Whether the component has been destroyed. */\n    _destroyed = false;\n    /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n    _portalOutlet;\n    /** Subject for notifying that the snack bar has announced to screen readers. */\n    _onAnnounce = new Subject();\n    /** Subject for notifying that the snack bar has exited from view. */\n    _onExit = new Subject();\n    /** Subject for notifying that the snack bar has finished entering the view. */\n    _onEnter = new Subject();\n    /** The state of the snack bar animations. */\n    _animationState = 'void';\n    /** aria-live value for the live region. */\n    _live;\n    /**\n     * Element that will have the `mdc-snackbar__label` class applied if the attached component\n     * or template does not have it. This ensures that the appropriate structure, typography, and\n     * color is applied to the attached view.\n     */\n    _label;\n    /**\n     * Role of the live region. This is only for Firefox as there is a known issue where Firefox +\n     * JAWS does not read out aria-live message.\n     */\n    _role;\n    /** Unique ID of the aria-live element. */\n    _liveElementId = inject(_IdGenerator).getId('mat-snack-bar-container-live-');\n    constructor() {\n        super();\n        const config = this.snackBarConfig;\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (config.politeness === 'assertive' && !config.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (config.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n        // Note: ideally we'd just do an `afterNextRender` in the places where we need to delay\n        // something, however in some cases (TestBed teardown) the injector can be destroyed at an\n        // unexpected time, causing the `afterRender` to fail.\n        this._rendersRef = afterRender(() => this._renders.next(), { manualCleanup: true });\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /**\n     * Attaches a DOM portal to the snack bar container.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n    attachDomPortal = (portal) => {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachDomPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    };\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(animationName) {\n        if (animationName === EXIT_ANIMATION) {\n            this._completeExit();\n        }\n        else if (animationName === ENTER_ANIMATION) {\n            clearTimeout(this._enterFallback);\n            this._ngZone.run(() => {\n                this._onEnter.next();\n                this._onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            // _animationState lives in host bindings and `detectChanges` does not refresh host bindings\n            // so we have to call `markForCheck` to ensure the host view is refreshed eventually.\n            this._changeDetectorRef.markForCheck();\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n            if (this._animationsDisabled) {\n                this._renders.pipe(take(1)).subscribe(() => {\n                    this._ngZone.run(() => queueMicrotask(() => this.onAnimationEnd(ENTER_ANIMATION)));\n                });\n            }\n            else {\n                clearTimeout(this._enterFallback);\n                this._enterFallback = setTimeout(() => {\n                    // The snack bar will stay invisible if it fails to animate. Add a fallback class so it\n                    // becomes visible. This can happen in some apps that do `* {animation: none !important}`.\n                    this._elementRef.nativeElement.classList.add('mat-snack-bar-fallback-visible');\n                    this.onAnimationEnd(ENTER_ANIMATION);\n                }, 200);\n            }\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        if (this._destroyed) {\n            return of(undefined);\n        }\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            this._changeDetectorRef.markForCheck();\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n            if (this._animationsDisabled) {\n                this._renders.pipe(take(1)).subscribe(() => {\n                    this._ngZone.run(() => queueMicrotask(() => this.onAnimationEnd(EXIT_ANIMATION)));\n                });\n            }\n            else {\n                clearTimeout(this._exitFallback);\n                this._exitFallback = setTimeout(() => this.onAnimationEnd(EXIT_ANIMATION), 200);\n            }\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._clearFromModals();\n        this._completeExit();\n        this._renders.complete();\n        this._rendersRef.destroy();\n    }\n    _completeExit() {\n        clearTimeout(this._exitFallback);\n        queueMicrotask(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        this._exposeToModals();\n        // Check to see if the attached component or template uses the MDC template structure,\n        // specifically the MDC label. If not, the container should apply the MDC label class to this\n        // component's label container, which will apply MDC's label styles to the attached view.\n        const label = this._label.nativeElement;\n        const labelClass = 'mdc-snackbar__label';\n        label.classList.toggle(labelClass, !label.querySelector(`.${labelClass}`));\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live element if there is an\n     * `aria-modal` and the live element is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live element.\n     */\n    _exposeToModals() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with the\n        // `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const id = this._liveElementId;\n        const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        for (let i = 0; i < modals.length; i++) {\n            const modal = modals[i];\n            const ariaOwns = modal.getAttribute('aria-owns');\n            this._trackedModals.add(modal);\n            if (!ariaOwns) {\n                modal.setAttribute('aria-owns', id);\n            }\n            else if (ariaOwns.indexOf(id) === -1) {\n                modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n            }\n        }\n    }\n    /** Clears the references to the live element from any modals it was added to. */\n    _clearFromModals() {\n        this._trackedModals.forEach(modal => {\n            const ariaOwns = modal.getAttribute('aria-owns');\n            if (ariaOwns) {\n                const newValue = ariaOwns.replace(this._liveElementId, '').trim();\n                if (newValue.length > 0) {\n                    modal.setAttribute('aria-owns', newValue);\n                }\n                else {\n                    modal.removeAttribute('aria-owns');\n                }\n            }\n        });\n        this._trackedModals.clear();\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (this._announceTimeoutId) {\n            return;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            this._announceTimeoutId = setTimeout(() => {\n                if (this._destroyed) {\n                    return;\n                }\n                const element = this._elementRef.nativeElement;\n                const inertElement = element.querySelector('[aria-hidden]');\n                const liveElement = element.querySelector('[aria-live]');\n                if (inertElement && liveElement) {\n                    // If an element in the snack bar content is focused before being moved\n                    // track it and restore focus after moving to the live region.\n                    let focusedElement = null;\n                    if (this._platform.isBrowser &&\n                        document.activeElement instanceof HTMLElement &&\n                        inertElement.contains(document.activeElement)) {\n                        focusedElement = document.activeElement;\n                    }\n                    inertElement.removeAttribute('aria-hidden');\n                    liveElement.appendChild(inertElement);\n                    focusedElement?.focus();\n                    this._onAnnounce.next();\n                    this._onAnnounce.complete();\n                }\n            }, this._announceDelay);\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBarContainer, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.6\", type: MatSnackBarContainer, isStandalone: true, selector: \"mat-snack-bar-container\", host: { listeners: { \"animationend\": \"onAnimationEnd($event.animationName)\", \"animationcancel\": \"onAnimationEnd($event.animationName)\" }, properties: { \"class.mat-snack-bar-container-enter\": \"_animationState === \\\"visible\\\"\", \"class.mat-snack-bar-container-exit\": \"_animationState === \\\"hidden\\\"\", \"class.mat-snack-bar-container-animations-enabled\": \"!_animationsDisabled\" }, classAttribute: \"mdc-snackbar mat-mdc-snack-bar-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }, { propertyName: \"_label\", first: true, predicate: [\"label\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mdc-snackbar__surface mat-mdc-snackbar-surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet />\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\"@keyframes _mat-snack-bar-enter{from{transform:scale(0.8);opacity:0}to{transform:scale(1);opacity:1}}@keyframes _mat-snack-bar-exit{from{opacity:1}to{opacity:0}}.mat-mdc-snack-bar-container{display:flex;align-items:center;justify-content:center;box-sizing:border-box;-webkit-tap-highlight-color:rgba(0,0,0,0);margin:8px}.mat-mdc-snack-bar-handset .mat-mdc-snack-bar-container{width:100vw}.mat-snack-bar-container-animations-enabled{opacity:0}.mat-snack-bar-container-animations-enabled.mat-snack-bar-fallback-visible{opacity:1}.mat-snack-bar-container-animations-enabled.mat-snack-bar-container-enter{animation:_mat-snack-bar-enter 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-snack-bar-container-animations-enabled.mat-snack-bar-container-exit{animation:_mat-snack-bar-exit 75ms cubic-bezier(0.4, 0, 1, 1) forwards}.mat-mdc-snackbar-surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;padding-left:0;padding-right:8px}[dir=rtl] .mat-mdc-snackbar-surface{padding-right:0;padding-left:8px}.mat-mdc-snack-bar-container .mat-mdc-snackbar-surface{min-width:344px;max-width:672px}.mat-mdc-snack-bar-handset .mat-mdc-snackbar-surface{width:100%;min-width:0}@media(forced-colors: active){.mat-mdc-snackbar-surface{outline:solid 1px}}.mat-mdc-snack-bar-container .mat-mdc-snackbar-surface{color:var(--mdc-snackbar-supporting-text-color, var(--mat-sys-inverse-on-surface));border-radius:var(--mdc-snackbar-container-shape, var(--mat-sys-corner-extra-small));background-color:var(--mdc-snackbar-container-color, var(--mat-sys-inverse-surface))}.mdc-snackbar__label{width:100%;flex-grow:1;box-sizing:border-box;margin:0;padding:14px 8px 14px 16px}[dir=rtl] .mdc-snackbar__label{padding-left:8px;padding-right:16px}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-family:var(--mdc-snackbar-supporting-text-font, var(--mat-sys-body-medium-font));font-size:var(--mdc-snackbar-supporting-text-size, var(--mat-sys-body-medium-size));font-weight:var(--mdc-snackbar-supporting-text-weight, var(--mat-sys-body-medium-weight));line-height:var(--mdc-snackbar-supporting-text-line-height, var(--mat-sys-body-medium-line-height))}.mat-mdc-snack-bar-actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled).mat-unthemed{color:var(--mat-snack-bar-button-color, var(--mat-sys-inverse-primary))}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){--mat-text-button-state-layer-color:currentColor;--mat-text-button-ripple-color:currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{opacity:.1}\\n\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, imports: [CdkPortalOutlet], host: {\n                        'class': 'mdc-snackbar mat-mdc-snack-bar-container',\n                        '[class.mat-snack-bar-container-enter]': '_animationState === \"visible\"',\n                        '[class.mat-snack-bar-container-exit]': '_animationState === \"hidden\"',\n                        '[class.mat-snack-bar-container-animations-enabled]': '!_animationsDisabled',\n                        '(animationend)': 'onAnimationEnd($event.animationName)',\n                        '(animationcancel)': 'onAnimationEnd($event.animationName)',\n                    }, template: \"<div class=\\\"mdc-snackbar__surface mat-mdc-snackbar-surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet />\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\"@keyframes _mat-snack-bar-enter{from{transform:scale(0.8);opacity:0}to{transform:scale(1);opacity:1}}@keyframes _mat-snack-bar-exit{from{opacity:1}to{opacity:0}}.mat-mdc-snack-bar-container{display:flex;align-items:center;justify-content:center;box-sizing:border-box;-webkit-tap-highlight-color:rgba(0,0,0,0);margin:8px}.mat-mdc-snack-bar-handset .mat-mdc-snack-bar-container{width:100vw}.mat-snack-bar-container-animations-enabled{opacity:0}.mat-snack-bar-container-animations-enabled.mat-snack-bar-fallback-visible{opacity:1}.mat-snack-bar-container-animations-enabled.mat-snack-bar-container-enter{animation:_mat-snack-bar-enter 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-snack-bar-container-animations-enabled.mat-snack-bar-container-exit{animation:_mat-snack-bar-exit 75ms cubic-bezier(0.4, 0, 1, 1) forwards}.mat-mdc-snackbar-surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;padding-left:0;padding-right:8px}[dir=rtl] .mat-mdc-snackbar-surface{padding-right:0;padding-left:8px}.mat-mdc-snack-bar-container .mat-mdc-snackbar-surface{min-width:344px;max-width:672px}.mat-mdc-snack-bar-handset .mat-mdc-snackbar-surface{width:100%;min-width:0}@media(forced-colors: active){.mat-mdc-snackbar-surface{outline:solid 1px}}.mat-mdc-snack-bar-container .mat-mdc-snackbar-surface{color:var(--mdc-snackbar-supporting-text-color, var(--mat-sys-inverse-on-surface));border-radius:var(--mdc-snackbar-container-shape, var(--mat-sys-corner-extra-small));background-color:var(--mdc-snackbar-container-color, var(--mat-sys-inverse-surface))}.mdc-snackbar__label{width:100%;flex-grow:1;box-sizing:border-box;margin:0;padding:14px 8px 14px 16px}[dir=rtl] .mdc-snackbar__label{padding-left:8px;padding-right:16px}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-family:var(--mdc-snackbar-supporting-text-font, var(--mat-sys-body-medium-font));font-size:var(--mdc-snackbar-supporting-text-size, var(--mat-sys-body-medium-size));font-weight:var(--mdc-snackbar-supporting-text-weight, var(--mat-sys-body-medium-weight));line-height:var(--mdc-snackbar-supporting-text-line-height, var(--mat-sys-body-medium-line-height))}.mat-mdc-snack-bar-actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled).mat-unthemed{color:var(--mat-snack-bar-button-color, var(--mat-sys-inverse-primary))}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){--mat-text-button-state-layer-color:currentColor;--mat-text-button-ripple-color:currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{opacity:.1}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }], _label: [{\n                type: ViewChild,\n                args: ['label', { static: true }]\n            }] } });\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    _overlay = inject(Overlay);\n    _live = inject(LiveAnnouncer);\n    _injector = inject(Injector);\n    _breakpointObserver = inject(BreakpointObserver);\n    _parentSnackBar = inject(MatSnackBar, { optional: true, skipSelf: true });\n    _defaultConfig = inject(MAT_SNACK_BAR_DEFAULT_OPTIONS);\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n    _snackBarRefAtThisLevel = null;\n    /** The component that should be rendered as the snack bar's simple component. */\n    simpleSnackBarComponent = SimpleSnackBar;\n    /** The container component that attaches the provided template or component. */\n    snackBarContainerComponent = MatSnackBarContainer;\n    /** The CSS class to apply for handset mode. */\n    handsetCssClass = 'mat-mdc-snack-bar-handset';\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    constructor() { }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBar, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBar, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\nconst DIRECTIVES = [MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction];\nclass MatSnackBarModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule,\n            PortalModule,\n            MatButtonModule,\n            MatCommonModule,\n            SimpleSnackBar, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction], exports: [MatCommonModule, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBarModule, providers: [MatSnackBar], imports: [OverlayModule,\n            PortalModule,\n            MatButtonModule,\n            MatCommonModule,\n            SimpleSnackBar, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        OverlayModule,\n                        PortalModule,\n                        MatButtonModule,\n                        MatCommonModule,\n                        SimpleSnackBar,\n                        ...DIRECTIVES,\n                    ],\n                    exports: [MatCommonModule, ...DIRECTIVES],\n                    providers: [MatSnackBar],\n                }]\n        }] });\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst matSnackBarAnimations = {\n    // Represents\n    // trigger('state', [\n    //   state(\n    //     'void, hidden',\n    //     style({\n    //       transform: 'scale(0.8)',\n    //       opacity: 0,\n    //     }),\n    //   ),\n    //   state(\n    //     'visible',\n    //     style({\n    //       transform: 'scale(1)',\n    //       opacity: 1,\n    //     }),\n    //   ),\n    //   transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    //   transition(\n    //     '* => void, * => hidden',\n    //     animate(\n    //       '75ms cubic-bezier(0.4, 0.0, 1, 1)',\n    //       style({\n    //         opacity: 0,\n    //       }),\n    //     ),\n    //   ),\n    // ])\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: {\n        type: 7,\n        name: 'state',\n        'definitions': [\n            {\n                type: 0,\n                name: 'void, hidden',\n                styles: { type: 6, styles: { transform: 'scale(0.8)', opacity: 0 }, offset: null },\n            },\n            {\n                type: 0,\n                name: 'visible',\n                styles: { type: 6, styles: { transform: 'scale(1)', opacity: 1 }, offset: null },\n            },\n            {\n                type: 1,\n                expr: '* => visible',\n                animation: { type: 4, styles: null, timings: '150ms cubic-bezier(0, 0, 0.2, 1)' },\n                options: null,\n            },\n            {\n                type: 1,\n                expr: '* => void, * => hidden',\n                animation: {\n                    type: 4,\n                    styles: { type: 6, styles: { opacity: 0 }, offset: null },\n                    timings: '75ms cubic-bezier(0.4, 0.0, 1, 1)',\n                },\n                options: null,\n            },\n        ],\n        options: {},\n    },\n};\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarAction, MatSnackBarActions, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}