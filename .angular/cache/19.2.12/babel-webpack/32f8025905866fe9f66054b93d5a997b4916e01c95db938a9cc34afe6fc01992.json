{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/decisionmaking/decisionmaking.component.ts\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Component } from '@angular/core';\nlet DecisionmakingComponent = class DecisionmakingComponent {\n  svc;\n  oneReq = {\n    speaker: '',\n    text: ''\n  };\n  oneDecision;\n  batchInput = '[{\"speaker\":\"Alice\",\"text\":\"…\"}]';\n  batchDecisions;\n  summaryResp;\n  constructor(svc) {\n    this.svc = svc;\n  }\n  submitOne() {\n    this.svc.evalOne(this.oneReq).subscribe(dec => this.oneDecision = dec);\n  }\n  submitBatch() {\n    let reqs;\n    try {\n      reqs = JSON.parse(this.batchInput);\n    } catch {\n      return alert('Invalid JSON');\n    }\n    this.svc.evalBatch(reqs).subscribe(list => {\n      this.batchDecisions = list;\n      this.summaryResp = undefined;\n    });\n  }\n  getSummary() {\n    let reqs;\n    try {\n      reqs = JSON.parse(this.batchInput);\n    } catch {\n      return alert('Invalid JSON');\n    }\n    this.svc.summaryBatch(reqs).subscribe(sum => this.summaryResp = sum);\n  }\n};\nDecisionmakingComponent = __decorate([Component({\n  selector: 'app-decisionmaking',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  template: `\n    <h2>Single Argument</h2>\n    <form (ngSubmit)=\"submitOne()\">\n      <label>\n        Speaker:\n        <input [(ngModel)]=\"oneReq.speaker\" name=\"speaker\" required>\n      </label>\n      <label>\n        Text:\n        <input [(ngModel)]=\"oneReq.text\" name=\"text\" required>\n      </label>\n      <button type=\"submit\">Evaluate</button>\n    </form>\n\n    <div *ngIf=\"oneDecision\">\n      <strong>Will it work?</strong> {{ oneDecision.willWork }}<br>\n      <span *ngIf=\"oneDecision.reason\">\n        <em>Reason:</em> {{ oneDecision.reason }}\n      </span>\n    </div>\n\n    <hr>\n\n    <h2>Batch &amp; Summary</h2>\n    <textarea [(ngModel)]=\"batchInput\" rows=\"5\"\n              placeholder='[{\"speaker\":\"Alice\",\"text\":\"…\"}]'></textarea>\n    <button (click)=\"submitBatch()\">Eval Batch</button>\n    <button (click)=\"getSummary()\">Summary</button>\n\n    <h3 *ngIf=\"batchDecisions?.length\">Batch Results</h3>\n    <ul>\n      <li *ngFor=\"let d of batchDecisions\">\n        <strong>{{ d.speaker }}</strong>\n        — Will it work? {{ d.willWork }}\n        <em *ngIf=\"d.reason\">(Reason: {{ d.reason }})</em>\n      </li>\n    </ul>\n\n    <div *ngIf=\"summaryResp\">\n      <h3>Summary</h3>\n      <p>Total arguments: {{ summaryResp.totalArguments }}</p>\n      <p>{{ summaryResp.summary }}</p>\n    </div>\n  `\n})], DecisionmakingComponent);\nexport { DecisionmakingComponent };","map":{"version":3,"names":["CommonModule","FormsModule","Component","DecisionmakingComponent","svc","oneReq","speaker","text","oneDecision","batchInput","batchDecisions","summaryResp","constructor","submitOne","evalOne","subscribe","dec","submitBatch","reqs","JSON","parse","alert","evalBatch","list","undefined","getSummary","summaryBatch","sum","__decorate","selector","standalone","imports","template"],"sources":["C:\\Users\\T14s\\Downloads\\Compressed\\demo2\\demo2\\src\\app\\pages\\decisionmaking\\decisionmaking.component.ts"],"sourcesContent":["// src/app/decisionmaking/decisionmaking.component.ts\r\nimport { CommonModule }  from '@angular/common';\r\nimport { FormsModule }   from '@angular/forms';\r\nimport { Component }     from '@angular/core';\r\n\r\nimport {\r\n  ArgumentRequest,\r\n  Decision,\r\n  SummaryResponse,\r\n  ArgumentService\r\n} from '../services/argument.service';\r\n\r\n@Component({\r\n  selector: 'app-decisionmaking',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  template: `\r\n    <h2>Single Argument</h2>\r\n    <form (ngSubmit)=\"submitOne()\">\r\n      <label>\r\n        Speaker:\r\n        <input [(ngModel)]=\"oneReq.speaker\" name=\"speaker\" required>\r\n      </label>\r\n      <label>\r\n        Text:\r\n        <input [(ngModel)]=\"oneReq.text\" name=\"text\" required>\r\n      </label>\r\n      <button type=\"submit\">Evaluate</button>\r\n    </form>\r\n\r\n    <div *ngIf=\"oneDecision\">\r\n      <strong>Will it work?</strong> {{ oneDecision.willWork }}<br>\r\n      <span *ngIf=\"oneDecision.reason\">\r\n        <em>Reason:</em> {{ oneDecision.reason }}\r\n      </span>\r\n    </div>\r\n\r\n    <hr>\r\n\r\n    <h2>Batch &amp; Summary</h2>\r\n    <textarea [(ngModel)]=\"batchInput\" rows=\"5\"\r\n              placeholder='[{\"speaker\":\"Alice\",\"text\":\"…\"}]'></textarea>\r\n    <button (click)=\"submitBatch()\">Eval Batch</button>\r\n    <button (click)=\"getSummary()\">Summary</button>\r\n\r\n    <h3 *ngIf=\"batchDecisions?.length\">Batch Results</h3>\r\n    <ul>\r\n      <li *ngFor=\"let d of batchDecisions\">\r\n        <strong>{{ d.speaker }}</strong>\r\n        — Will it work? {{ d.willWork }}\r\n        <em *ngIf=\"d.reason\">(Reason: {{ d.reason }})</em>\r\n      </li>\r\n    </ul>\r\n\r\n    <div *ngIf=\"summaryResp\">\r\n      <h3>Summary</h3>\r\n      <p>Total arguments: {{ summaryResp.totalArguments }}</p>\r\n      <p>{{ summaryResp.summary }}</p>\r\n    </div>\r\n  `\r\n})\r\nexport class DecisionmakingComponent {\r\n  oneReq: ArgumentRequest = { speaker: '', text: '' };\r\n  oneDecision?: Decision;\r\n\r\n  batchInput = '[{\"speaker\":\"Alice\",\"text\":\"…\"}]';\r\n  batchDecisions?: Decision[];\r\n  summaryResp?: SummaryResponse;\r\n\r\n  constructor(private svc: ArgumentService) {}\r\n\r\n  submitOne() {\r\n    this.svc.evalOne(this.oneReq)\r\n      .subscribe(dec => this.oneDecision = dec);\r\n  }\r\n\r\n  submitBatch() {\r\n    let reqs: ArgumentRequest[];\r\n    try {\r\n      reqs = JSON.parse(this.batchInput);\r\n    } catch {\r\n      return alert('Invalid JSON');\r\n    }\r\n    this.svc.evalBatch(reqs)\r\n      .subscribe(list => {\r\n        this.batchDecisions = list;\r\n        this.summaryResp = undefined;\r\n      });\r\n  }\r\n\r\n  getSummary() {\r\n    let reqs: ArgumentRequest[];\r\n    try {\r\n      reqs = JSON.parse(this.batchInput);\r\n    } catch {\r\n      return alert('Invalid JSON');\r\n    }\r\n    this.svc.summaryBatch(reqs)\r\n      .subscribe(sum => this.summaryResp = sum);\r\n  }\r\n}\r\n"],"mappings":";AAAA;AACA,SAASA,YAAY,QAAS,iBAAiB;AAC/C,SAASC,WAAW,QAAU,gBAAgB;AAC9C,SAASC,SAAS,QAAY,eAAe;AA0DtC,IAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAQdC,GAAA;EAPpBC,MAAM,GAAoB;IAAEC,OAAO,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAE,CAAE;EACnDC,WAAW;EAEXC,UAAU,GAAG,kCAAkC;EAC/CC,cAAc;EACdC,WAAW;EAEXC,YAAoBR,GAAoB;IAApB,KAAAA,GAAG,GAAHA,GAAG;EAAoB;EAE3CS,SAASA,CAAA;IACP,IAAI,CAACT,GAAG,CAACU,OAAO,CAAC,IAAI,CAACT,MAAM,CAAC,CAC1BU,SAAS,CAACC,GAAG,IAAI,IAAI,CAACR,WAAW,GAAGQ,GAAG,CAAC;EAC7C;EAEAC,WAAWA,CAAA;IACT,IAAIC,IAAuB;IAC3B,IAAI;MACFA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACX,UAAU,CAAC;IACpC,CAAC,CAAC,MAAM;MACN,OAAOY,KAAK,CAAC,cAAc,CAAC;IAC9B;IACA,IAAI,CAACjB,GAAG,CAACkB,SAAS,CAACJ,IAAI,CAAC,CACrBH,SAAS,CAACQ,IAAI,IAAG;MAChB,IAAI,CAACb,cAAc,GAAGa,IAAI;MAC1B,IAAI,CAACZ,WAAW,GAAGa,SAAS;IAC9B,CAAC,CAAC;EACN;EAEAC,UAAUA,CAAA;IACR,IAAIP,IAAuB;IAC3B,IAAI;MACFA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACX,UAAU,CAAC;IACpC,CAAC,CAAC,MAAM;MACN,OAAOY,KAAK,CAAC,cAAc,CAAC;IAC9B;IACA,IAAI,CAACjB,GAAG,CAACsB,YAAY,CAACR,IAAI,CAAC,CACxBH,SAAS,CAACY,GAAG,IAAI,IAAI,CAAChB,WAAW,GAAGgB,GAAG,CAAC;EAC7C;CACD;AAvCYxB,uBAAuB,GAAAyB,UAAA,EAjDnC1B,SAAS,CAAC;EACT2B,QAAQ,EAAE,oBAAoB;EAC9BC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAAC/B,YAAY,EAAEC,WAAW,CAAC;EACpC+B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4CX,CAAC,C,EACW7B,uBAAuB,CAuCnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}